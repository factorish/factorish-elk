#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

DIR=$(dirname $0)

# functions
. $DIR/functions


# Environment variables that should be passed in via `docker run` command.

# FRAMEWORK
export APP_NAME=${APP_NAME:-"elasticsearch"}
export PUBLISH=${PUBLISH:-9200}
export PORT=${PORT:-9200}
export PROTO=${PROTO:-tcp}

# Your App
export CLUSTER_NAME=${CLUSTER_NAME:-"elasticsearch"}
export ES_HEAP_SIZE=${ES_HEAP_SIZE:-'512m'}
export ID=${ID:-0}

if [[ -n $ETCD_HOST ]]; then
  echo "==> ETCD_HOST set.  starting ${APP_NAME} etcd support."
  export ETCD_PORT=${ETCD_PORT:-4001}
  export ETCD="$ETCD_HOST:$ETCD_PORT"
  export ETCD_PATH=${ETCD_PATH:-"/services/$APP_NAME"}
  export ETCD_TTL=${ETCD_TTL:-10}
  export ETCD_OPTIONS="--no-sync -C $ETCD"
  export CONFD_OPTIONS="-node $ETCD -config-file /app/confd_etcd.toml"
  export SLEEP_TIME=$(($ETCD_TTL/2))
  configure_etcd
  mv /app/conf.d/optional/service-confd.toml /app/conf.d/service-confd.toml

# whoever makes the initial config etcd dir gets to be primary node for initial election
  etcd_make_directory config && \
    etcdctl $ETCD_OPTIONS set $ETCD_PATH/config/primary ${HOSTNAME} --ttl 300 > /dev/null

  etcd_set_default config/clustername ${CLUSTER_NAME}

else
  echo "==> ETCD_HOST not set.  starting ${APP_NAME} without etcd support."
  export CONFD_OPTIONS="-config-file /app/confd_env.toml"
  export SLEEP_TIME=10
  # App specific equiv to etcd /services/example/text
fi

# make service directories based on service templates
for service in $(ls /app/templates/service/); do
  if [[ ${service} == "confd" && -z ${ETCD_HOST} ]]; then
    echo "skipping confd service"
  else
    mkdir -p /etc/service/$service
  fi
done

# If ID is passed, use it to give 1 a chance to boot first.
if [[ $ID > 1 ]]; then
  sleep 60
fi

# wait for confd to run once and install initial templates
until confd -onetime $CONFD_OPTIONS; do
  echo "echo ==> ${APP_NAME}: waiting for confd to write initial templates..."
  sleep $SLEEP_TIME
done

echo Starting ${APP_NAME}

# smart shutdown on SIGINT and SIGTERM
trap on_exit INT TERM

exec /usr/bin/runsvdir -P /etc/service

exit 1
