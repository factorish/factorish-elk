#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

DIR=$(dirname $0)

# functions
. $DIR/functions


# Environment variables that should be passed in via `docker run` command.

# FRAMEWORK
export APP_NAME=${APP_NAME:-"elasticsearch"}
export PUBLISH=${PUBLISH:-9200}
export PORT=${PORT:-9200}
export PROTO=${PROTO:-tcp}

export ETCD_HOST=${ETCD_HOST:-$HOST}
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD=${ETCD:-"$ETCD_HOST:$ETCD_PORT"}
export ETCD_PATH=${ETCD_PATH:-"/services/elasticsearch"}
export ETCD_TTL=${ETCD_TTL:-30}
export ETCD_OPTIONS="--no-sync -C $ETCD"

[[ -z ${ETCD_HOST} ]] && echo HOST or ETCD_HOST must be set && exit 1

# Your App
export CLUSTER_NAME=${CLUSTER_NAME:-"elasticsearch"}
export ES_HEAP_SIZE=${ES_HEAP_SIZE:-'512m'}
export ID=${ID:-0}

if [[ -z $HOST ]]; then
  echo '==> $HOST not set.  booting ${APP_NAME} without etcd support.'
  # COMMAND TO RUN YOUR APP GOES HERE
  /opt/elasticsearch-1.4.2/bin/elasticsearch -p /app/elasticsearch.pid
  echo "==> ${APP_NAME} running..."
  exit $?
fi

# If ID is passed, use it to give 1 a chance to boot first.
if [[ $ID > 1 ]]; then
  sleep 60
fi

configure_etcd

# whoever makes the initial config etcd dir gets to be primary node for initial election
etcd_make_directory config && \
  etcdctl $ETCD_OPTIONS set $ETCD_PATH/config/primary ${HOSTNAME} --ttl 300 > /dev/null

etcd_set_default config/clustername ${CLUSTER_NAME}

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml -confdir /app; do
  echo "echo ==> ${APP_NAME}: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

echo Starting ${APP_NAME}

# smart shutdown on SIGINT and SIGTERM
trap on_exit INT TERM

/usr/bin/supervisord -c /etc/supervisor/supervisord.conf

exit 1